{
    "openapi": "3.0.0",
    "info": {
        "title": "Product API",
        "version": "1.0.0",
        "description": "API documentation for the Product"
    },
    "servers": [
        {
            "url": "https://productsbackend-dev-itpl.up.railway.app/api",
            "description": "Product Server URL"
        },
        {
            "url": "http://localhost:6001/api",
            "description": "Product Localhost"
        }
    ],
    "tags": [
        {
            "name": "Category",
            "description": "API for category in the system"
        },
        {
            "name": "Subcategory",
            "description": "API for subcategory in the system"
        },
        {
            "name": "Feature",
            "description": "API for feature in the system"
        },
        {
            "name": "ValidValues",
            "description": "API for validvalues in the system"
        },
        {
            "name": "Banner",
            "description": "API for banners in the system"
        },
        {
            "name": "Tag",
            "description": "API for tag in the system"
        },
        {
            "name": "Hsn",
            "description": "API for Hsn in the system"
        },
        {
            "name": "Product",
            "description": "API for product in the system"
        },
        {
            "name": "Variant",
            "description": "API for variants in the system"
        },
        {
            "name": "Alias",
            "description": "API for related aliases in the system"
        },
        {
            "name": "Consumer",
            "description": "Consumer API's for get requests required for the consumer UI"
        },
        {
            "name": "Order",
            "description": "API for order in the consumer ui"
        },
        {
            "name": "AdminOrder",
            "description": "API of order for the admin"
        },
        {
            "name": "Customer",
            "description": "API for customer in the system"
        }
    ],
    "paths": {
        "/variants": {
            "post": {
                "summary": "Create a variant",
                "tags": [
                    "Variant"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "create variant",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Variant"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "variant created succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in creating variant ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Variant"
                ],
                "summary": "Get all variants",
                "description": "Get all variants",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "variants fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching variants ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/variants/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Variant"
                ],
                "summary": "Get a variant by id",
                "description": "Get a variant by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variant to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "variant fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching variant ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/variants/{id}/products": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Variant"
                ],
                "summary": "Add products to a variant by id",
                "description": "Add products to a variant",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variant",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/AddProductsToVariant"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "products added to the variant succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in adding products to the variant ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/variants/{id}/products/{product_id}": {
            "delete": {
                "summary": "Remove a product from variant by id",
                "tags": [
                    "Variant"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Remove a product from variant",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the variant",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "product_id",
                        "in": "path",
                        "description": "id of the product to be removed",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/RemoveProductFromVariant"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Value deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in deleting value",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aliases": {
            "post": {
                "summary": "Create a alias",
                "tags": [
                    "Alias"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "create alias",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Alias"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "alias created succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in creating alias ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Alias"
                ],
                "summary": "Get all aliases",
                "description": "Get all aliases",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "aliases fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching aliases ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aliases/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Alias"
                ],
                "summary": "Get aliases based on search",
                "description": "Get aliases based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search based on the searchText"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Aliases based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching aliases based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aliases/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Alias"
                ],
                "summary": "Get a alias by id",
                "description": "Get a alias by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the alias to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "alias fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching alias ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Edit alias by id",
                "tags": [
                    "Alias"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "edit a alias",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the alias to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateAlias"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "alias updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating alias ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aliases/{id}/status": {
            "patch": {
                "summary": "Change the status of a alias",
                "tags": [
                    "Alias"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update the status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the alias to update status ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateAliasStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "alias status updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating status of the alias ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/subcategories": {
            "post": {
                "summary": "Create a subcategory",
                "tags": [
                    "Subcategory"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "create subcategory",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/SubCategory"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "subcategory created succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in creating subcategory",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Subcategory"
                ],
                "summary": "Get all subcategories ",
                "description": "Get all subcategories",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subcategories fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "error in fetching subcategories",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/subcategories/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Subcategory"
                ],
                "summary": "Get Subcategory based on search",
                "description": "Get Subcategory based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by Subcategory name"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subcategory based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Subcategory based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/subcategories/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Subcategory"
                ],
                "summary": "Get a subcategory by id",
                "description": "Get a subcategory by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the subcategory to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subcategory fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "error in fetching subcategory",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Edit subcategory by id",
                "tags": [
                    "Subcategory"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "edit subcategory",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the subcategory to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateSubCategory"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "subcategory updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating subcategory",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete subcategory by id",
                "tags": [
                    "Subcategory"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "delete a subcategory",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the subcategory to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/DeleteSubcat"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "subcategory deleted succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in deleting subcategory",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/subcategories/{id}/status": {
            "patch": {
                "summary": "Change the status of a subcategory",
                "tags": [
                    "Subcategory"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update the status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the subcategory to update status ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateSubcatStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "subcategory status updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating status of the subcategory ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/features": {
            "post": {
                "summary": "Create a feature",
                "tags": [
                    "Feature"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Create a feature",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Feature"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Feature created successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in creating a feature",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Feature"
                ],
                "summary": "Get all features",
                "description": "Get all features",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "For filtering, replace the additionalProp, $operator, string by fieldName, $operator, value, respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Features fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching features",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/features/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Feature"
                ],
                "summary": "Get feature based on search",
                "description": "Get feature based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by feature name"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "feature based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching feature based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/features/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Feature"
                ],
                "summary": "Get a feature by id",
                "description": "Get a feature by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the feature to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feature fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching feature",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Edit feature by id",
                "tags": [
                    "Feature"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Edit a feature",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the feature to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateFeature"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Feature updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating feature",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete feature by id",
                "tags": [
                    "Feature"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Delete a feature",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the feature to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/DeleteFeature"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Feature deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in deleting feature",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/validvalues": {
            "post": {
                "summary": "Create a validvalue",
                "tags": [
                    "ValidValues"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Create a validvalue",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/ValidValues"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "validvalue created successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in creating a validvalue",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "ValidValues"
                ],
                "summary": "Get all validvalues",
                "description": "Get all validvalues",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "For filtering, replace the additionalProp, $operator, string by fieldName, $operator, value, respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ValidValues fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching validvalues",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/validvalues/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "ValidValues"
                ],
                "summary": "Get validvalue based on search",
                "description": "Get validvalue based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by valid value name"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "validvalue based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching valid value based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/validvalues/{type}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "ValidValues"
                ],
                "summary": "Get a validvalue by type",
                "description": "Get a validvalue by type",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Type of the validvalue to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fetch",
                        "in": "query",
                        "description": "fetch all values of valid value by passing all",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ValidValues fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching validvalue",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Edit validvalues by id",
                "tags": [
                    "ValidValues"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Edit a validvalue by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "type of the validvalue to patch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateValidValues"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "validvalue updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating validvalue",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/validvalues/{type}/values": {
            "post": {
                "summary": "add values to a validvalue by id",
                "tags": [
                    "ValidValues"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "add values to a validvalue by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "type of the validvalue to post",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/AddValue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "values added to validvalue successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in adding values to valid value",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/validvalues/{type}/{key}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "ValidValues"
                ],
                "summary": "Get a value by key",
                "description": "Get a value by key",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "type of the validvalue to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "key of the value to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Value fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching value",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete value by id",
                "tags": [
                    "ValidValues"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Delete a value",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "type of the validvalue to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "key of the value to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/DeleteValue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Value deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in deleting value",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "edit value of validvalues",
                "tags": [
                    "ValidValues"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "edit a value of validvalue",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "type of the validvalue to patch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "key of the value to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateValue"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "value updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating value",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/validvalues/{type}/{key}/status": {
            "patch": {
                "summary": "change status of values",
                "tags": [
                    "ValidValues"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "change status of a value of validvalue",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "type of the validvalue to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "key of the value to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateValueStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "value updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating value",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/banners": {
            "post": {
                "summary": "Create a banner",
                "tags": [
                    "Banner"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "create banner",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Banner"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "banner created succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in creating banner ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Banner"
                ],
                "summary": "Get all banners",
                "description": "Get all banners",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "banners fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching banners ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/banners/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Banner"
                ],
                "summary": "Get Banner based on search",
                "description": "Get Banner based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by Banner name"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Banner based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Banner based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/banners/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Banner"
                ],
                "summary": "Get a banner by id",
                "description": "Get a banner by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the banner to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "banner fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching banner ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Edit banner by id",
                "tags": [
                    "Banner"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "edit a banner",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the banner to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateBanner"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "banner updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating banner ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/banners/{id}/status": {
            "patch": {
                "summary": "Change the status of a banner",
                "tags": [
                    "Banner"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update the status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the banner to update status ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateBannerStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "banner status updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating status of the banner ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/stores": {
            "post": {
                "summary": "Create a Store",
                "tags": [
                    "Store"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "create Store",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Store"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Store created succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in creating Store",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Get all Store",
                "description": "Get all Store",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "For filtering, replace the additionalProp, $operator, string by fieldName, $operator, value, respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Store",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/stores/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Get store based on search",
                "description": "Get store based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by store name"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "stores based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching stores based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/stores/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Store"
                ],
                "summary": "Get a Store by id",
                "description": "Get a Store by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the Store to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Store fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Store",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "edit fields of Store",
                "tags": [
                    "Store"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "edit fields of Store",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Store to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateStore"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Store updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating Store",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/stores/{id}/status": {
            "patch": {
                "summary": "change status of Store",
                "tags": [
                    "Store"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "change status of a Store",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the store to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateStoreStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Store status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating Store Status",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/tags": {
            "post": {
                "summary": "Create a tag",
                "tags": [
                    "Tag"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "create tag",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Tag"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tag created succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in creating Tag",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Get all Tag based on filter, pagination and sort",
                "description": "Get all Tag",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "For filtering, replace the additionalProp, $operator, string by fieldName, $operator, value, respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tags fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Tags",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/tags/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Get tag based on search",
                "description": "Get tag based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by tag_name"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "tags based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching tags based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/tags/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Tag"
                ],
                "summary": "Get a Tag by id",
                "description": "Get a Tag by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the Tag to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Tag",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/tags/{id}/status": {
            "patch": {
                "summary": "change status of Tag",
                "tags": [
                    "Tag"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "change status of a Tag",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Tag to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateTag"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tag status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating Tag Status",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hsns": {
            "post": {
                "summary": "Create a hsn",
                "tags": [
                    "Hsn"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "create hsn",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Hsn"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Hsn created succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in creating Hsn",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Hsn"
                ],
                "summary": "Get all hsn based on filter, pagination and sort",
                "description": "Get all Hsn",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "For filtering, replace the additionalProp, $operator, string by fieldName, $operator, value, respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hsns fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Hsns",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hsns/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Hsn"
                ],
                "summary": "Get hsn based on search",
                "description": "Get hsn based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by hsn_text"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "hsns based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching hsns based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hsns/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Hsn"
                ],
                "summary": "Get a Hsn by id",
                "description": "Get a Hsn by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the Hsn to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hsn fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Hsn",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "change fields of Hsn",
                "tags": [
                    "Hsn"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "change fields of a Hsn",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Hsn to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateHsn"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "hsn updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating Hsn",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hsns/{id}/status": {
            "patch": {
                "summary": "change status of Hsn",
                "tags": [
                    "Hsn"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "change status of a Hsn",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the Hsn to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/HsnStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "hsn status changed successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating Hsn status",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get all products",
                "description": "Get all products",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "For filtering, replace the additionalProp, $operator, string by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching products",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a product",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Create product",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/ProductInput"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in creating product",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get product based on search",
                "description": "Get product based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by product_text"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "products based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching products based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/ids": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get Product for multiple ids from Product ",
                "description": "Retrieve Product for multiple ids from Product .",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The comma separated list of ids"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All products"
                    },
                    "400": {
                        "description": "Bad Request - Invalid product ids."
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required."
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get a product by id",
                "description": "Get a product by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching product",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Edit product by id",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Edit a product",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating product",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/status": {
            "patch": {
                "summary": "Change the status of a product",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update the status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to update status ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateProductStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in updating status of the product",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/price": {
            "patch": {
                "summary": "Patch product price by id",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Patch product price",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateProductPrice"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product price patched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in patching product price",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/offer": {
            "patch": {
                "summary": "Patch product offer status by id",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Patch product offer status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateProductOffer"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product price patched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in patching product price",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/oos": {
            "patch": {
                "summary": "Patch product offer status by id",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Patch product offer status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateProductOos"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product price patched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in patching product price",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/tags": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Add a tag to a specific product",
                "description": "Add a tag to a product with a specific product ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to add a tag to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/AddTagToProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tag removed Successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in adding tag",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/tags/{tag_id}": {
            "delete": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete a speicfic tag ",
                "description": "Delete a tag with a specific ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to delete tag from",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tag_id",
                        "in": "path",
                        "description": "ID of the tag to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag removed Successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in removing tag",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/images": {
            "post": {
                "summary": "Add primary and additional images",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/AddImagesToProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/products/{id}/images/{img_url}": {
            "delete": {
                "summary": "Delete an image by URL",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "img_url",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uri"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image deleted successfully"
                    },
                    "404": {
                        "description": "Image not found in primary or additional images"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/products/{id}/features": {
            "post": {
                "summary": "add features to a product by id",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "add features to a product by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the product",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/AddFeaturesToProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "features added to product successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in adding features to product",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/features/{code}": {
            "delete": {
                "summary": "Delete feature from product",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Delete a feature",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of the product",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "in": "path",
                        "description": "code of the feature of product to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/DeleteFeatureFromProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Value deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in deleting value",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/aliases": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Add aliases to a specific product",
                "description": "Add aliases to a product with a specific product ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to add alaises to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/AddAliasesToProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Aliases added successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in adding alias",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/aliases/{alias_id}": {
            "delete": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete a speicfic alias from a product ",
                "description": "Delete a aliase with a specific ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to delete alias from",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "alias_id",
                        "in": "path",
                        "description": "ID of the alias to remove from a product",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/RemoveAliasFromProduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Alias removed successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in removing alias",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/relatedproducts": {
            "post": {
                "summary": "Add related product to a particular product",
                "tags": [
                    "Product"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/AddRelatedproduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Related product added Successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in adding related product",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products/{id}/relatedproducts/{relatedproduct_id}": {
            "delete": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete a speicfic related product ",
                "description": "Delete a speicfic related product by its ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to which related product is to be delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relatedproduct_id",
                        "in": "path",
                        "description": "ID of the related product that is to be delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/DeleteRelatedproduct"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "related product removed Successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "Error in removing related product",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/categories": {
            "post": {
                "summary": "Create a category",
                "tags": [
                    "Category"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "create category",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Category"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "category created succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in creating category ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get all categories",
                "description": "Get all categories",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "categories fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching categories ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/categories/search": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get Category based on search",
                "description": "Get Category based on search",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search by Category name"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category based on searching params fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Category based on searching params",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get a category by id",
                "description": "Get a category by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "category fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching category ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "summary": "Edit category by id",
                "tags": [
                    "Category"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "edit a category",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateCategory"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "category updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating category ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete category by id",
                "tags": [
                    "Category"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "delete a category",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to be deleted",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/DeleteCat"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "category deleted succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in deleting category",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/categories/{id}/status": {
            "patch": {
                "summary": "Change the status of a category",
                "tags": [
                    "Category"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update the status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to update status ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UpdateCatStatus"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "category status updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating status of the category ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/orders/{id}/status": {
            "patch": {
                "summary": "Change the status of an order",
                "tags": [
                    "AdminOrder"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Update the status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to update status ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "status": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "order status updated succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "400": {
                        "description": "error in updating status of the order ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/variants": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get all active variants",
                "description": "Get all active variants",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "variants fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching variants ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/variants/{id}": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get a variant by id",
                "description": "Get a variant by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the variant to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "variant fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching variant ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/features": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get all active features",
                "description": "Get all active features",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "features fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching features ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/features/{id}": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get a feature by id",
                "description": "Get a feature by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the feature to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "feature fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching feature ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/categories": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get all active categories",
                "description": "Get all active categories",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "categories fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching categories ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/categories/{id}": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get a category by id",
                "description": "Get a category by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the category to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "category fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching category ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/subcategories": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get all active subcategories",
                "description": "Get all active subcategories",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string  by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subcategories fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching subcategories ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/subcategories/{id}": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get a subcategories by id",
                "description": "Get a subcategories by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the subcategories to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subcategories fetched succesfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching subcategories ",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/banners": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get all active banners",
                "description": "Get all active banners",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "banners fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching banners",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/banners/{id}": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get a banner by id",
                "description": "Get a banner by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the banner to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "banner fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching banner",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/products": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get all active products",
                "description": "Get all active products",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    },
                    {
                        "name": "detailed",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "For detailed Product fields"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "products fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching products",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/products/{id}": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get a product by id",
                "description": "Get a product by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the product to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "product fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching product",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/stores": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get all active stores",
                "description": "Get all active stores",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "stores fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching stores",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/stores/{id}": {
            "get": {
                "tags": [
                    "Consumer"
                ],
                "summary": "Get a store by id",
                "description": "Get a store by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the store to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "store fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching store",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/orders": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Create a new order",
                "produces": [
                    "application/json"
                ],
                "operationId": "createOrder",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/OrderInput"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Get all orders",
                "description": "Get all orders",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "orders fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching orders",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/orders/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Get a order by id",
                "description": "Get a order by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "order fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching order",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/orders/{id}/payment": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "create payment and rzp order for an order after order creation",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to pay",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "order payment created successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Update Payment Details",
                "description": "Update payment details for a specific order",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to pay",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment details to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/OrderPaymentInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "order payment updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in updating order payment",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/orders/rzp/verifyPayment": {
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Verify Payment",
                "description": "Verify PaymentSignature from razorpay",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/verifyPaymentInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment verified successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in verifying payment",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/customer": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get logged in customer",
                "description": "Get logged in customer",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Logged In customer fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching Logged In customer",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/customer/address": {
            "post": {
                "summary": "Add address ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Customer"
                ],
                "description": "Add address to logged in customer",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/CustomerAddressInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address added successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in adding address",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/customer/address/{id}": {
            "patch": {
                "summary": "Update address ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Customer"
                ],
                "description": "Update address of logged in customer",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the address to update",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/CustomerAddressInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in updating address",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete address ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Customer"
                ],
                "description": "Delete address from logged in customer",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the address to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in deleting address",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/payment": {
            "post": {
                "summary": "Create a payment",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Payment"
                ],
                "description": "Create a payment",
                "produces": [
                    "application/json"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "orderId": {
                                        "type": "string"
                                    },
                                    "amount": {
                                        "type": "number"
                                    },
                                    "currency": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment created successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in creating payment",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/payment/{id}": {
            "get": {
                "summary": "Get payment details",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Payment"
                ],
                "description": "Get payment details for a specific order",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the payment to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment details fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching payment details",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/consumer/payment/rzp/{id}": {
            "get": {
                "summary": "Get payment details",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Payment"
                ],
                "description": "Get payment details for a specific order",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "RazorPay ID of the payment to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment details fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching payment details",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "AdminOrder"
                ],
                "summary": "Get all orders",
                "description": "Get all orders",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "filters",
                        "in": "query",
                        "style": "deepObject",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "properties": {
                                    "$operator": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "for filtering replace the additionalProp, $operator, string by fieldName, $operator, value respectively"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Sort by a field in the format 'fieldName:asc' or 'fieldName:desc'"
                    },
                    {
                        "name": "pagination[page]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Page number for pagination"
                    },
                    {
                        "name": "pagination[pageSize]",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Number of items per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "orders fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching orders",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "AdminOrder"
                ],
                "summary": "Get a order by id",
                "description": "Get a order by id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to retrieve",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "order fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in fetching order",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/orders/{id}/payment/refresh": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "AdminOrder"
                ],
                "summary": "Refresh payment status",
                "description": "Refresh payment status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to refresh payment status for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment status refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in refreshing payment status",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/payment/{id}/refreshStatus": {
            "patch": {
                "summary": "Refresh payment status",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Payment"
                ],
                "description": "Refresh payment status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the order to refresh payment status for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment status refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "404": {
                        "description": "Error in refreshing payment status",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "apiKey",
                "name": "Authorization",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "in": "header"
            }
        }
    },
    "definitions": {
        "Error": {
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "Response": {
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "Variant": {
            "required": [
                "type",
                "products"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "type of the variant"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "_id": {
                                "type": "string"
                            },
                            "quantity": {
                                "type": "integer"
                            },
                            "measure": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "AddProductsToVariant": {
            "required": [
                "products"
            ],
            "type": "object",
            "properties": {
                "products": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "_id": {
                                "type": "string"
                            },
                            "quantity": {
                                "type": "integer"
                            },
                            "measure": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "Alias": {
            "required": [
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the alias"
                }
            }
        },
        "Category": {
            "required": [
                "name",
                "desc",
                "img_url",
                "sort",
                "code"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the category"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the category"
                },
                "img_url": {
                    "type": "string",
                    "description": "Image of the category"
                },
                "sort": {
                    "type": "number",
                    "description": "Sort number of the category"
                },
                "code": {
                    "type": "string",
                    "description": "Code of the category"
                }
            }
        },
        "SubCategory": {
            "required": [
                "name",
                "desc",
                "img_url",
                "sort",
                "category_code",
                "code"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Subcategory"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the Subcategory"
                },
                "img_url": {
                    "type": "string",
                    "description": "Image of the Subcategory"
                },
                "sort": {
                    "type": "number",
                    "description": "Sort number of the Subcategory"
                },
                "category_code": {
                    "type": "string",
                    "description": "Code of the category"
                },
                "code": {
                    "type": "string",
                    "description": "Code of the subcategory"
                }
            }
        },
        "ValidValues": {
            "required": [
                "type",
                "label"
            ],
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "type of the validvalue"
                },
                "label": {
                    "type": "string",
                    "description": "label of the validvalue"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "key of values of validvalues"
                            },
                            "label": {
                                "type": "string",
                                "description": "label of values of validvalues"
                            },
                            "sort": {
                                "type": "number",
                                "description": "sort number of values of validvalues"
                            }
                        }
                    },
                    "required": [
                        "key",
                        "label"
                    ]
                }
            }
        },
        "Banner": {
            "required": [
                "name",
                "desc",
                "code",
                "start_date",
                "end_date",
                "sort",
                "img_url",
                "redirect_url",
                "location.type"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the banner"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the banner"
                },
                "code": {
                    "type": "string",
                    "description": "Code of the banner"
                },
                "start_date": {
                    "type": "string",
                    "description": "Start date of the banner"
                },
                "end_date": {
                    "type": "string",
                    "description": "End date of the banner"
                },
                "sort": {
                    "type": "number",
                    "description": "Sort number of the banner"
                },
                "img_url": {
                    "type": "string",
                    "description": "Image of the banner"
                },
                "redirect_url": {
                    "type": "string",
                    "description": "Redirect url of the banner"
                },
                "location": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "type of location of banner"
                        },
                        "code": {
                            "type": "string",
                            "description": "code of the location type of banner"
                        }
                    }
                }
            }
        },
        "Store": {
            "required": [
                "name",
                "desc",
                "city_key",
                "code"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Store"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the Store"
                },
                "code": {
                    "type": "string",
                    "description": "code of the Store"
                },
                "city_key": {
                    "type": "string",
                    "description": "City key of store"
                },
                "sort": {
                    "type": "number",
                    "description": "Sort oder of the store"
                }
            }
        },
        "UpdateStore": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Store"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the Store"
                },
                "sort": {
                    "type": "number",
                    "description": "sort oder of the Store"
                },
                "city_key": {
                    "type": "string",
                    "description": "City key of store"
                },
                "reason": {
                    "type": "string",
                    "description": "reason to update store attributes"
                }
            }
        },
        "UpdateStoreStatus": {
            "required": [
                "is_active",
                "reason"
            ],
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean",
                    "description": "status of the Store it is boolean"
                },
                "reason": {
                    "type": "string",
                    "description": "reason to update store status"
                }
            }
        },
        "UpdateAlias": {
            "required": [
                "reason",
                "name"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the alias"
                },
                "reason": {
                    "type": "string",
                    "description": "Reson for updating alias"
                }
            }
        },
        "UpdateCategory": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the category"
                },
                "desc": {
                    "type": "string",
                    "description": "Desc of the category"
                },
                "img_url": {
                    "type": "string",
                    "description": "Image of the category"
                },
                "sort": {
                    "type": "number",
                    "description": "Sort number of the category"
                },
                "reason": {
                    "type": "string",
                    "description": "Reson for updating category"
                }
            }
        },
        "UpdateSubCategory": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Subcategory"
                },
                "desc": {
                    "type": "string",
                    "description": "Desc of the Subcategory"
                },
                "img_url": {
                    "type": "string",
                    "description": "Image of the Subcategory"
                },
                "category_code": {
                    "type": "string",
                    "description": "code of the category"
                },
                "sort": {
                    "type": "number",
                    "description": "Sort number of the Subcategory"
                },
                "reason": {
                    "type": "string",
                    "description": "Reson for updating Subcategory"
                }
            }
        },
        "UpdateValidValues": {
            "required": [
                "label",
                "reason"
            ],
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "label of the validvalue"
                },
                "reason": {
                    "type": "string",
                    "description": "reason for updating validvalue"
                }
            }
        },
        "AddValue": {
            "type": "object",
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "key of values of validvalues"
                            },
                            "label": {
                                "type": "string",
                                "description": "label of values of validvalues"
                            },
                            "sort": {
                                "type": "number",
                                "description": "sort number of values of validvalues"
                            }
                        }
                    },
                    "required": [
                        "key",
                        "label"
                    ]
                },
                "reason": {
                    "type": "string",
                    "description": "reason for adding value"
                }
            }
        },
        "AddFeaturesToProduct": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "description": "code of feature of product"
                            },
                            "value": {
                                "type": "string",
                                "description": "value of feature of product"
                            }
                        }
                    },
                    "required": [
                        "code",
                        "value"
                    ]
                }
            }
        },
        "UpdateValue": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "label of the value"
                },
                "sort": {
                    "type": "number",
                    "description": "sort order of value"
                },
                "reason": {
                    "type": "string",
                    "description": "reason for editing value"
                }
            }
        },
        "UpdateBanner": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the banner"
                },
                "desc": {
                    "type": "string",
                    "description": "Desc of the banner"
                },
                "start_date": {
                    "type": "string",
                    "description": "Start date of the banner"
                },
                "end_date": {
                    "type": "string",
                    "description": "End date of the banner"
                },
                "sort": {
                    "type": "number",
                    "description": "Sort number of the banner"
                },
                "img_url": {
                    "type": "string",
                    "description": "Image of the banner"
                },
                "redirect_url": {
                    "type": "string",
                    "description": "Redirect url of the banner"
                },
                "reason": {
                    "type": "string",
                    "description": "Reson for updating banner"
                }
            }
        },
        "DeleteCat": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for deleting category"
                }
            }
        },
        "DeleteSubcat": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for deleting subcategory"
                }
            }
        },
        "DeleteValue": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for deleting value"
                }
            }
        },
        "RemoveProductFromVariant": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for removing product from variant"
                }
            }
        },
        "DeleteFeatureFromProduct": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for deleting feature from product"
                }
            }
        },
        "RemoveAliasFromProduct": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for removing alias from product"
                }
            }
        },
        "UpdateAliasStatus": {
            "required": [
                "reason",
                "is_active"
            ],
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean",
                    "description": "Status of the alias"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason req for updating status of the alias"
                }
            }
        },
        "UpdateCatStatus": {
            "required": [
                "reason",
                "is_active"
            ],
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean",
                    "description": "Status of the category"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason req for updating status of the category"
                }
            }
        },
        "UpdateSubcatStatus": {
            "required": [
                "reason",
                "is_active"
            ],
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean",
                    "description": "Status of the subcategory"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason req for updating status of the subcategory"
                }
            }
        },
        "UpdateValueStatus": {
            "required": [
                "reason",
                "is_active"
            ],
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean",
                    "description": "Status of the value"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason req for updating status of the value"
                }
            }
        },
        "UpdateBannerStatus": {
            "required": [
                "reason",
                "is_active"
            ],
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean",
                    "description": "Status of the banner"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason req for updating status of the banner"
                }
            }
        },
        "Feature": {
            "required": [
                "name",
                "desc",
                "code",
                "type",
                "sort"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the feature"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the feature"
                },
                "code": {
                    "type": "string",
                    "description": "Code of the feature"
                },
                "type": {
                    "type": "string",
                    "description": "code of valid values value"
                },
                "sort": {
                    "type": "number",
                    "description": "sort of the feature"
                }
            }
        },
        "UpdateFeature": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the feature"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the feature"
                },
                "sort": {
                    "type": "number",
                    "description": "Sort of the feature"
                },
                "reason": {
                    "type": "string",
                    "description": "Reason for updating feature"
                }
            }
        },
        "DeleteFeature": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason for deleting feature"
                }
            }
        },
        "Tag": {
            "required": [
                "text"
            ],
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "description": "text of the tag"
                }
            }
        },
        "UpdateTag": {
            "required": [
                "text"
            ],
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean",
                    "description": "status of tag whether it is active or not"
                },
                "reason": {
                    "type": "string",
                    "description": "reason to change status of text"
                }
            }
        },
        "AddTagToProduct": {
            "type": "object",
            "required": [
                "tag_id"
            ],
            "properties": {
                "tag_id": {
                    "type": "string"
                }
            }
        },
        "AddAliasesToProduct": {
            "type": "object",
            "required": [
                "aliases"
            ],
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Hsn": {
            "required": [
                "code",
                "desc",
                "gst"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "code of the Hsn"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the Hsn"
                },
                "gst": {
                    "type": "number",
                    "description": "gst of the Hsn"
                },
                "is_active": {
                    "type": "string",
                    "description": "status of hsn. whether it is active or not"
                }
            }
        },
        "UpdateHsn": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "code of the Hsn"
                },
                "desc": {
                    "type": "string",
                    "description": "Description of the Hsn"
                },
                "gst": {
                    "type": "number",
                    "description": "gst of the Hsn"
                },
                "reason": {
                    "type": "string",
                    "description": "reason for updating hsn"
                }
            }
        },
        "HsnStatus": {
            "required": [
                "is_active",
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "reason for updating hsn"
                },
                "is_active": {
                    "type": "boolean",
                    "description": "status of hsn"
                }
            }
        },
        "ProductInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "sku": {
                    "type": "string"
                },
                "sort": {
                    "type": "number"
                },
                "images": {
                    "type": "object",
                    "properties": {
                        "primary": {
                            "type": "string"
                        },
                        "additional": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "unit": {
                    "type": "object",
                    "properties": {
                        "quantity": {
                            "type": "string"
                        },
                        "measure": {
                            "type": "string"
                        }
                    }
                },
                "category_code": {
                    "type": "string"
                },
                "subcategory_code": {
                    "type": "string"
                },
                "hsn_code": {
                    "type": "string"
                },
                "prices": {
                    "type": "object",
                    "properties": {
                        "mrp": {
                            "type": "number"
                        },
                        "pbt": {
                            "type": "number"
                        },
                        "taxpct": {
                            "type": "number"
                        }
                    }
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string"
                            },
                            "value": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "UpdateProduct": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "sort": {
                    "type": "number"
                },
                "category_code": {
                    "type": "string"
                },
                "subcategory_code": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "DeleteProduct": {
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string"
                }
            }
        },
        "UpdateProductStatus": {
            "type": "object",
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "UpdateProductOffer": {
            "type": "object",
            "properties": {
                "offer": {
                    "type": "boolean"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "UpdateProductOos": {
            "type": "object",
            "properties": {
                "oos": {
                    "type": "boolean"
                }
            }
        },
        "UpdateProductPrice": {
            "type": "object",
            "properties": {
                "prices": {
                    "type": "object",
                    "properties": {
                        "mrp": {
                            "type": "number"
                        },
                        "pbt": {
                            "type": "number"
                        },
                        "taxpct": {
                            "type": "number"
                        }
                    }
                },
                "hsn_code": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "AddImagesToProduct": {
            "type": "object",
            "properties": {
                "images": {
                    "type": "object",
                    "properties": {
                        "primary": {
                            "type": "string"
                        },
                        "additional": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "Relatedproduct": {
            "required": [
                "_id",
                "related"
            ],
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "description": "_id of product to which related product have to add"
                },
                "related": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "_id": {
                                "type": "string",
                                "description": "id of related product"
                            },
                            "sort": {
                                "type": "number",
                                "description": "sort order of related products"
                            }
                        }
                    }
                }
            }
        },
        "UpdateRelatedproduct": {
            "required": [
                "relproduct_id",
                "sort",
                "reason"
            ],
            "type": "object",
            "properties": {
                "relproduct_id": {
                    "type": "string",
                    "description": "_id of related product which have to update"
                },
                "sort": {
                    "type": "number",
                    "description": "sort order of related product which have to update"
                },
                "reason": {
                    "type": "string",
                    "description": "reason to update relatedproduct"
                }
            }
        },
        "AddRelatedproduct": {
            "required": [
                "relatedproduct_id"
            ],
            "type": "object",
            "properties": {
                "relatedproducts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "ids of related product which have to add"
                },
                "two_way": {
                    "type": "boolean",
                    "description": "Do you also want to add this product to this related product also"
                }
            }
        },
        "DeleteRelatedproduct": {
            "required": [
                "reason"
            ],
            "type": "object",
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "reason to delete relatedproduct"
                }
            }
        },
        "OrderInput": {
            "type": "object",
            "properties": {
                "total_order_amount": {
                    "type": "number"
                },
                "total_sp_amount": {
                    "type": "number"
                },
                "total_tax_amount": {
                    "type": "number"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderProductInput"
                    }
                },
                "other_charges": {
                    "type": "object",
                    "properties": {
                        "handling_cost": {
                            "type": "number"
                        },
                        "delivery_charges": {
                            "type": "number"
                        }
                    }
                },
                "discounts": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string"
                        },
                        "amount": {
                            "type": "number"
                        }
                    }
                },
                "currency": {
                    "type": "string"
                },
                "shipping": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "address": {
                            "type": "string"
                        },
                        "trackingNumber": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "name",
                        "address"
                    ]
                },
                "orderNotes": {
                    "type": "string"
                }
            },
            "required": [
                "customer",
                "products",
                "shipping",
                "payment"
            ]
        },
        "OrderPaymentInput": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "method": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                }
            },
            "required": [
                "amount",
                "method",
                "currency",
                "status",
                "transaction_id"
            ]
        },
        "PostOrderInput": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                }
            },
            "required": [
                "order_id"
            ]
        },
        "verifyPaymentInput": {
            "type": "object",
            "properties": {
                "razorpay_payment_id": {
                    "type": "string",
                    "description": "Payment id from razorpay"
                },
                "razorpay_order_id": {
                    "type": "string"
                },
                "razorpay_signature": {
                    "type": "string"
                }
            }
        },
        "OrderProductInput": {
            "type": "object",
            "properties": {
                "product_id": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "unit_sp": {
                    "type": "number"
                },
                "sku": {
                    "type": "string"
                },
                "tax_amount": {
                    "type": "number"
                },
                "subtotal": {
                    "type": "number"
                }
            },
            "required": [
                "product_id",
                "product_name",
                "quantity",
                "unit_sp",
                "sku",
                "tax_amount",
                "subtotal"
            ]
        },
        "CustomerAddressInput": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "contact_phone": {
                    "type": "string"
                },
                "address_type": {
                    "type": "string"
                },
                "other_address_type": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "landmark": {
                    "type": "string"
                },
                "locality": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "contact_phone",
                "address_type",
                "address",
                "locality",
                "city",
                "state",
                "country",
                "pincode"
            ]
        }
    }
}